// <auto-generated />
using System;
using Magic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Magic.Migrator.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240807095731_CorrectGameSessionCharacter")]
    partial class CorrectGameSessionCharacter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Magic.Domain.Entities.BaseGameSessionMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<int>("GameSessionMessageTypeEnum")
                        .HasColumnType("integer")
                        .HasColumnName("game_session_message_type_enum");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("game_session_messages", "public");

                    b.HasDiscriminator<int>("GameSessionMessageTypeEnum");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int?>("CasterCharacterCharacteristicId")
                        .HasColumnType("integer")
                        .HasColumnName("caster_character_characteristic_id");

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("integer")
                        .HasColumnName("character_class_id");

                    b.Property<int?>("CoolDownCount")
                        .HasColumnType("integer")
                        .HasColumnName("cool_down_count");

                    b.Property<int>("CoolDownType")
                        .HasColumnType("integer")
                        .HasColumnName("cool_down_type");

                    b.Property<int?>("CubeCount")
                        .HasColumnType("integer")
                        .HasColumnName("cube_count");

                    b.Property<int?>("CubeType")
                        .HasColumnType("integer")
                        .HasColumnName("cube_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer")
                        .HasColumnName("distance");

                    b.Property<int?>("Radius")
                        .HasColumnType("integer")
                        .HasColumnName("radius");

                    b.Property<int?>("TargetCharacterCharacteristicId")
                        .HasColumnType("integer")
                        .HasColumnName("target_character_characteristic_id");

                    b.Property<int>("TargetType")
                        .HasColumnType("integer")
                        .HasColumnName("target_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CasterCharacterCharacteristicId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("TargetCharacterCharacteristicId");

                    b.ToTable("character_ability", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = 1,
                            CoolDownType = 3,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Вы наносите урон основным оружием по выбраной цели нанося 1к10 урона",
                            Distance = 2,
                            TargetType = 1,
                            Title = "Удар основным оружием",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ActionType = 2,
                            CharacterClassId = 1,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Вы обладаете ограниченным источником выносливости, которым можете воспользоваться, чтобы уберечь себя. В свой ход вы можете бонусным действием восстановить хиты в размере 1к10",
                            TargetType = 3,
                            Title = "Второе дыхание",
                            Type = 3
                        },
                        new
                        {
                            Id = 3,
                            ActionType = 2,
                            CharacterClassId = 1,
                            CoolDownType = 2,
                            Description = "Немедленно получите ещё одно действие в этом ходу. На следующий ход эффект порыва исчезает",
                            TargetType = 3,
                            Title = "Порыв к действию",
                            Type = 4
                        },
                        new
                        {
                            Id = 4,
                            ActionType = 1,
                            CharacterClassId = 1,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Удар основным оружием по конусу 3 клетки перед собой. Наносит 1к10 всем, кто находится в конусе",
                            Distance = 1,
                            Radius = 3,
                            TargetType = 4,
                            Title = "Размашистый удар",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            ActionType = 2,
                            CharacterClassId = 1,
                            CoolDownType = 4,
                            CubeCount = 2,
                            CubeType = 2,
                            Description = "Немедленно получите еще 3 очка действия в этом ходу, но получите 2к6 урона по себе",
                            TargetType = 3,
                            Title = "Ярость",
                            Type = 4
                        },
                        new
                        {
                            Id = 6,
                            ActionType = 1,
                            CharacterClassId = 2,
                            CoolDownType = 4,
                            CubeCount = 3,
                            CubeType = 4,
                            Description = "Немедленно выпускает огненый шар в точку и происходит взрыв с радиюусов 1м. Дальность 30м. Все существа в радиусе взрыва получают 3к10 урона",
                            Distance = 30,
                            Radius = 1,
                            TargetType = 2,
                            Title = "Огненый шар",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            ActionType = 1,
                            CharacterClassId = 2,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 6,
                            Description = "Вы внушаете определенный курс действий (ограниченный одной-двумя фразами) существу, видимому в пределах дистанции, способному слышать и понимать вас",
                            Distance = 30,
                            TargetCharacterCharacteristicId = 5,
                            TargetType = 1,
                            Title = "Внушение",
                            Type = 5
                        },
                        new
                        {
                            Id = 8,
                            ActionType = 1,
                            CasterCharacterCharacteristicId = 5,
                            CharacterClassId = 2,
                            CoolDownType = 3,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Вы кидаете сгусток огня в существо или предмет в пределах дистанции ( 30 м ). Совершите по цели дальнобойную атаку заклинанием. При попадании цель получает урон огнём 1к10.",
                            Distance = 30,
                            TargetType = 1,
                            Title = "Огненный снаряд",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            ActionType = 1,
                            CharacterClassId = 2,
                            CoolDownType = 2,
                            Description = "Выберите точку и перелетите к ней игнорируя все препятствия",
                            Distance = 10,
                            TargetType = 3,
                            Title = "Левитация",
                            Type = 4
                        },
                        new
                        {
                            Id = 10,
                            ActionType = 1,
                            CharacterClassId = 4,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 3,
                            Description = "Существо, которого вы касаетесь, восстанавливает количество хитов, равное 1к8",
                            Distance = 2,
                            TargetType = 1,
                            Title = "Исцеление",
                            Type = 3
                        },
                        new
                        {
                            Id = 11,
                            ActionType = 1,
                            CharacterClassId = 4,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 3,
                            Description = "Вы выпускаете сгусток светлой энергии по противнику, наносящий 1к8 урона и оглушающий его на 1 ход",
                            Distance = 30,
                            TargetType = 1,
                            Title = "Оглушающая кара",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            ActionType = 1,
                            CharacterClassId = 4,
                            CoolDownType = 4,
                            CubeCount = 1,
                            CubeType = 6,
                            Description = "Вы можете воскресить павшего союзника c 1к20",
                            Distance = 30,
                            TargetType = 1,
                            Title = "Воскрешение",
                            Type = 3
                        },
                        new
                        {
                            Id = 13,
                            ActionType = 1,
                            CharacterClassId = 4,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Вы накладываете на существо божественный щит, способный поглотить 1к10 урона",
                            Distance = 30,
                            TargetType = 1,
                            Title = "Божественный щит",
                            Type = 2
                        },
                        new
                        {
                            Id = 14,
                            ActionType = 1,
                            CharacterClassId = 3,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Выпускает град стрел по указаной области, нанося всем существам 1к10 урона",
                            Distance = 30,
                            Radius = 1,
                            TargetType = 2,
                            Title = "Залп стрел",
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            ActionType = 2,
                            CharacterClassId = 3,
                            CoolDownType = 2,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Вы обладаете бинтами, которым можете воспользоваться, чтобы исцелить себя. В свой ход вы можете бонусным действием восстановить хиты в размере 1к10",
                            TargetType = 3,
                            Title = "Перевязка ран",
                            Type = 3
                        },
                        new
                        {
                            Id = 16,
                            ActionType = 1,
                            CharacterClassId = 3,
                            CoolDownType = 3,
                            CubeCount = 1,
                            CubeType = 4,
                            Description = "Вы стреляете из лука по цели, нанося 1к10 урона",
                            Distance = 30,
                            TargetType = 1,
                            Title = "Точный выстрел",
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            ActionType = 1,
                            CharacterClassId = 3,
                            CoolDownType = 4,
                            CubeCount = 5,
                            CubeType = 4,
                            Description = "Вы стреляете из лука по цели особой стрелой, нанося 5к10 урона",
                            Distance = 30,
                            TargetType = 1,
                            Title = "Выстрел адамантиевой стрелой",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.HasKey("Id");

                    b.ToTable("character_avatar", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "storage/character/avatar/1.png"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "storage/character/avatar/2.png"
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "storage/character/avatar/3.png"
                        },
                        new
                        {
                            Id = 4,
                            AvatarUrl = "storage/character/avatar/4.png"
                        },
                        new
                        {
                            Id = 5,
                            AvatarUrl = "storage/character/avatar/5.png"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("character_characteristic", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Проверки Силы могут моделировать попытки поднять, толкнуть, подтянуть или сломать что-то, попытки втиснуть своё тело в некое пространство или другие попытки применения грубой силы. Навык Атлетика отражает особую склонность к некоторым проверкам Силы.",
                            Title = "Сила"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Проверка Ловкости может моделировать любую попытку перемещаться ловко, быстро или тихо, либо попытку не упасть с шаткой опоры. Навыки Акробатика, Ловкость рук и Скрытность отражают особую склонность к некоторым проверкам Ловкости.",
                            Title = "Ловкость"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Проверки Телосложения совершаются не часто, и от него не зависят никакие навыки, так как выносливость, которую отражает эта характеристика, пассивна, и персонаж или чудовище не может активно её использовать. Однако проверка Телосложения может моделировать вашу попытку сделать что-то необычное.",
                            Title = "Телосложение"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Проверки Интеллекта происходят когда вы используете логику, образование, память или дедуктивное мышление. Навыки История, Магия, Природа, Расследование и Религия отражают особую склонность к некоторым проверкам Интеллекта.",
                            Title = "Интеллект"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Проверки Мудрости могут отражать попытки понять язык тела, понять чьи-то переживания, заметить что-то в окружающем мире или позаботиться о раненом. Навыки Восприятие, Выживание, Медицина, Проницательность и Уход за животными отражают особую склонность к некоторым проверкам Мудрости.",
                            Title = "Мудрость"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Проверку Харизмы можно совершать при попытке повлиять на других или развлечь их, когда вы пытаетесь произвести впечатление или убедительно соврать, или если вы пытаетесь разобраться в сложной социальной ситуации. Навыки Выступление, Запугивание, Обман и Убеждение отражают особую склонность к некоторым проверкам Харизмы.",
                            Title = "Харизма"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterCharacteristicId")
                        .HasColumnType("integer")
                        .HasColumnName("character_characteristic_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CharacterCharacteristicId");

                    b.ToTable("character_class", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacterCharacteristicId = 1,
                            Description = "Опытный гладиатор сражается на арене и хорошо знает, как использовать свои трезубец и сеть, чтобы опрокинуть противника и обойти его, вызывая ликование публики и получая тактическое преимущество",
                            Title = "Воин"
                        },
                        new
                        {
                            Id = 2,
                            CharacterCharacteristicId = 5,
                            Description = "Волшебники — адепты высшей магии, объединяющиеся по типу своих заклинаний. Опираясь на тонкие плетения магии, пронизывающей вселенную, волшебники способны создавать заклинания взрывного огня, искрящихся молний, тонкого обмана и грубого контроля над сознанием.",
                            Title = "Волшебник"
                        },
                        new
                        {
                            Id = 3,
                            CharacterCharacteristicId = 2,
                            Description = "Вдали от суеты городов и посёлков, за изгородями, которые защищают самые далёкие фермы от ужасов дикой природы, среди плотно стоящих деревьев, беспутья лесов и на просторах необъятных равнин следопыты несут свой бесконечный дозор.",
                            Title = "Следопыт"
                        },
                        new
                        {
                            Id = 4,
                            CharacterCharacteristicId = 4,
                            Description = "Жрецы являются посредниками между миром смертных и далёкими мирами богов. Настолько же разные, насколько боги, которым они служат, жрецы воплощают работу своих божеств. В отличие от обычного проповедника, жрец наделён божественной магией.",
                            Title = "Жрец"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("character_race", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "В большинстве миров люди — это самая молодая из распространённых рас. Они поздно вышли на мировую сцену и живут намного меньше, чем дварфы, эльфы и драконы. Возможно, именно краткость их жизней заставляет их стремиться достигнуть как можно большего в отведённый им срок. А быть может, они хотят что-то доказать старшим расам, и поэтому создают могучие империи, основанные на завоеваниях и торговле. Что бы ни двигало ими, люди всегда были инноваторами и пионерами во всех мирах.",
                            Title = "Человек"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Эльфы — это волшебный народ, обладающий неземным изяществом, живущий в мире, но не являющийся его частью. Они живут в местах, наполненных воздушной красотой, в глубинах древних лесов или в серебряных жилищах, увенчанных сверкающими шпилями и переливающихся волшебным светом. Там лёгкие дуновения ветра разносят обрывки тихих мелодий и нежные ароматы. Эльфы любят природу и магию, музыку и поэзию, и всё прекрасное, что есть в мире.",
                            Title = "Эльф"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Полные древнего величия королевства и вырезанные в толще гор чертоги, удары кирок и молотков, раздающиеся в глубоких шахтах и пылающий кузнечный горн, верность клану и традициям и пылающая ненависть к гоблинам и оркам — вот вещи, объединяющие всех дварфов.",
                            Title = "Дварф"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Орки — дикие грабители и налетчики; у них сутулая осанка, низкий лоб и свиноподобные лица с выступающими нижними клыками, напоминающими бивни.",
                            Title = "Орк"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("AbilitieIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("abilitie_ids");

                    b.Property<int>("Armor")
                        .HasColumnType("integer")
                        .HasColumnName("armor");

                    b.Property<string>("AvatarUrL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_ur_l");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("integer")
                        .HasColumnName("character_class_id");

                    b.Property<int>("CharacterRaceId")
                        .HasColumnType("integer")
                        .HasColumnName("character_race_id");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristics");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Initiative")
                        .HasColumnType("integer")
                        .HasColumnName("initiative");

                    b.Property<int>("MaxHP")
                        .HasColumnType("integer")
                        .HasColumnName("max_h_p");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("speed");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterRaceId");

                    b.ToTable("character_template", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1850beb4-ed84-4c7f-9a5c-cd7bce35e5d4"),
                            AbilitieIds = new[] { 1, 2, 3, 4, 5 },
                            Armor = 12,
                            AvatarUrL = "https://cumm.co.uk/wp-content/uploads/2023/08/00-a-mans-cock.jpg?v=1698757203",
                            CharacterClassId = 1,
                            CharacterRaceId = 1,
                            Characteristics = "{\"2\":10,\"6\":20,\"4\":5,\"5\":5,\"3\":20,\"1\":20}",
                            Description = "A real man with a real COCK",
                            Initiative = 5,
                            MaxHP = 20,
                            Name = "Conductor Gennady",
                            Speed = 8
                        },
                        new
                        {
                            Id = new Guid("ce12d784-19c8-4f07-be2c-06e0c853a30e"),
                            AbilitieIds = new[] { 1, 10, 11, 12, 13 },
                            Armor = 8,
                            AvatarUrL = "https://source.boomplaymusic.com/group10/M00/02/07/40af9aa9b99e46aa8f205d25fe687fa9_320_320.jpg",
                            CharacterClassId = 4,
                            CharacterRaceId = 2,
                            Characteristics = "{\"2\":8,\"6\":20,\"4\":12,\"5\":15,\"3\":14,\"1\":5}",
                            Description = "She had a baby but still remains virgin. Never had sex, but she is your mother. She is definitely not a whore",
                            Initiative = 3,
                            MaxHP = 16,
                            Name = "Isabella The Lust",
                            Speed = 8
                        },
                        new
                        {
                            Id = new Guid("dfc2813c-96c3-497e-8799-ad3aa9de0ae2"),
                            AbilitieIds = new[] { 1, 14, 15, 16, 17 },
                            Armor = 10,
                            AvatarUrL = "https://source.boomplaymusic.com/group10/M00/02/07/40af9aa9b99e46aa8f205d25fe687fa9_320_320.jpg",
                            CharacterClassId = 3,
                            CharacterRaceId = 3,
                            Characteristics = "{\"2\":16,\"6\":10,\"4\":10,\"5\":10,\"3\":16,\"1\":10}",
                            Description = "Background: Criminal\r\nMotivation: You left home and found a place in a thieves' guild or some other criminal organization.\r\nOrigin: You always had a way with animals, able to calm them with a soothing word and a touch.\r\nEvents: 1\r\nYou fought in a battle. You escaped the battle unscathed, though many of your friends were injured or lost.",
                            Initiative = 7,
                            MaxHP = 18,
                            Name = "Nolgroug Berylguard",
                            Speed = 8
                        },
                        new
                        {
                            Id = new Guid("40078ee4-bfce-4ee3-b54b-ff6974e4bb69"),
                            AbilitieIds = new[] { 1, 6, 7, 8, 9 },
                            Armor = 6,
                            AvatarUrL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ5DIPHOFPGgT1oS9B78rTLUv9RkVsWKnEccg&s",
                            CharacterClassId = 2,
                            CharacterRaceId = 4,
                            Characteristics = "{\"2\":8,\"6\":10,\"4\":20,\"5\":18,\"3\":12,\"1\":8}",
                            Description = "Background: Outlander\r\nMotivation: From a young age, you couldn't abide the stink of the cities and preferred to spend your time in nature.\r\nOrigin: You grew up listening to tales of great wizards and knew you wanted to follow their path. You strove to be accepted at an academy of magic and succeeded.\r\nEvents: 2\r\nYou saw a demon and ran away before it could do anything to you.\r\n\r\nYou were accused of Assault. You were caught and convicted. You spent time in jail, chained to an oar, or performing hard labor. You served a sentence of 2 years or succeeded in escaping after that much time.",
                            Initiative = 4,
                            MaxHP = 14,
                            Name = "Snugug",
                            Speed = 8
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("city", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Казань"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Москва"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Екатеринбург"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("GameSessionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("game_session_status");

                    b.Property<int>("MaxUserCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_user_count");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("game_session", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.GameSessionCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("AbilitieIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("abilitie_ids");

                    b.Property<int>("Armor")
                        .HasColumnType("integer")
                        .HasColumnName("armor");

                    b.Property<string>("AvatarUrL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_ur_l");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("integer")
                        .HasColumnName("character_class_id");

                    b.Property<int>("CharacterRaceId")
                        .HasColumnType("integer")
                        .HasColumnName("character_race_id");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristics");

                    b.Property<int>("CurrentHP")
                        .HasColumnType("integer")
                        .HasColumnName("current_h_p");

                    b.Property<int?>("CurrentShield")
                        .HasColumnType("integer")
                        .HasColumnName("current_shield");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<int>("Initiative")
                        .HasColumnType("integer")
                        .HasColumnName("initiative");

                    b.Property<int>("MaxHP")
                        .HasColumnType("integer")
                        .HasColumnName("max_h_p");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int?>("PositionX")
                        .HasColumnType("integer")
                        .HasColumnName("position_x");

                    b.Property<int?>("PositionY")
                        .HasColumnType("integer")
                        .HasColumnName("position_y");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("speed");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterRaceId");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("game_session_character", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.GameSessionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("GameSessionUser", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("log", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("BlockedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("blocked_date");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("GameExperience")
                        .HasColumnType("text")
                        .HasColumnName("game_experience");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefKey")
                        .HasColumnType("text")
                        .HasColumnName("ref_key");

                    b.Property<Guid?>("RefUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("ref_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RefUserId");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.DiceGameSessionMessage", b =>
                {
                    b.HasBaseType("Magic.Domain.Entities.BaseGameSessionMessage");

                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<int>("CubeTypeEnum")
                        .HasColumnType("integer")
                        .HasColumnName("cube_type_enum");

                    b.Property<int>("Roll")
                        .HasColumnType("integer")
                        .HasColumnName("roll");

                    b.HasIndex("AuthorId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Magic.Domain.Entities.ServerGameSessionMessage", b =>
                {
                    b.HasBaseType("Magic.Domain.Entities.BaseGameSessionMessage");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Magic.Domain.Entities.ChatGameGameSessionMessage", b =>
                {
                    b.HasBaseType("Magic.Domain.Entities.ServerGameSessionMessage");

                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.HasIndex("AuthorId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Magic.Domain.Entities.BaseGameSessionMessage", b =>
                {
                    b.HasOne("Magic.Domain.Entities.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterAbility", b =>
                {
                    b.HasOne("Magic.Domain.Entities.CharacterCharacteristic", "CasterCharacterCharacteristic")
                        .WithMany()
                        .HasForeignKey("CasterCharacterCharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Magic.Domain.Entities.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Magic.Domain.Entities.CharacterCharacteristic", "TargetCharacterCharacteristic")
                        .WithMany()
                        .HasForeignKey("TargetCharacterCharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CasterCharacterCharacteristic");

                    b.Navigation("CharacterClass");

                    b.Navigation("TargetCharacterCharacteristic");
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterClass", b =>
                {
                    b.HasOne("Magic.Domain.Entities.CharacterCharacteristic", "CharacterCharacteristic")
                        .WithMany()
                        .HasForeignKey("CharacterCharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterCharacteristic");
                });

            modelBuilder.Entity("Magic.Domain.Entities.CharacterTemplate", b =>
                {
                    b.HasOne("Magic.Domain.Entities.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Magic.Domain.Entities.CharacterRace", "CharacterRace")
                        .WithMany()
                        .HasForeignKey("CharacterRaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("CharacterRace");
                });

            modelBuilder.Entity("Magic.Domain.Entities.GameSession", b =>
                {
                    b.HasOne("Magic.Domain.Entities.User", "CreatorUser")
                        .WithMany("CreatedGameSessions")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("Magic.Domain.Entities.GameSessionCharacter", b =>
                {
                    b.HasOne("Magic.Domain.Entities.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Magic.Domain.Entities.CharacterRace", "CharacterRace")
                        .WithMany()
                        .HasForeignKey("CharacterRaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Magic.Domain.Entities.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Magic.Domain.Entities.User", "Owner")
                        .WithMany("GameSessionsCharacters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("CharacterRace");

                    b.Navigation("GameSession");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Magic.Domain.Entities.GameSessionUser", b =>
                {
                    b.HasOne("Magic.Domain.Entities.GameSession", null)
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Magic.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Magic.Domain.Entities.User", b =>
                {
                    b.HasOne("Magic.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Magic.Domain.Entities.User", "RefUser")
                        .WithMany()
                        .HasForeignKey("RefUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("RefUser");
                });

            modelBuilder.Entity("Magic.Domain.Entities.DiceGameSessionMessage", b =>
                {
                    b.HasOne("Magic.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Magic.Domain.Entities.ChatGameGameSessionMessage", b =>
                {
                    b.HasOne("Magic.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Magic.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedGameSessions");

                    b.Navigation("GameSessionsCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
