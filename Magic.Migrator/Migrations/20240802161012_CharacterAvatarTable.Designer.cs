// <auto-generated />
using System;
using Magic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Magic.Migrator.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240802161012_CharacterAvatarTable")]
    partial class CharacterAvatarTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Magic.Domain.Entities.CharacterAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.HasKey("Id");

                    b.ToTable("character_avatar", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "storage/character/avatar/1.png"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "storage/character/avatar/2.png"
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "storage/character/avatar/3.png"
                        },
                        new
                        {
                            Id = 4,
                            AvatarUrl = "storage/character/avatar/4.png"
                        },
                        new
                        {
                            Id = 5,
                            AvatarUrl = "storage/character/avatar/5.png"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("city", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Казань"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Москва"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Екатеринбург"
                        });
                });

            modelBuilder.Entity("Magic.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("log", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("BlockedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("blocked_date");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("GameExperience")
                        .HasColumnType("text")
                        .HasColumnName("game_experience");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefKey")
                        .HasColumnType("text")
                        .HasColumnName("ref_key");

                    b.Property<Guid?>("RefUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("ref_user_id");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RefUserId");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("Magic.Domain.Entities.User", b =>
                {
                    b.HasOne("Magic.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Magic.Domain.Entities.User", "RefUser")
                        .WithMany()
                        .HasForeignKey("RefUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("RefUser");
                });
#pragma warning restore 612, 618
        }
    }
}
